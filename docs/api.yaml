openapi: 3.0.2
info:
  title: OME Portal API
  version: '0.9.0'
servers:
  - url: http://localhost:8080
    description: Local mock server
  - url: http://localhost:8000/api/v1
    description: Local development server
  - url: https://portal.rtamarathon.online/api/v1
    description: Production server
  - url: https://dev.portal.rtamarathon.online/api/v1
    description: Development server
tags:
  - name: schemes
    description: 'Event schemes and plans'
paths:
  /auth/me:
    get:
      summary: Get authenticated user
      tags:
        - Authentication
      responses:
        '200':
          description: Authenticated user JSON.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthUser'
    put:
      summary: Update authenticated user
      tags:
        - Authentication
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
      responses:
        '204':
          description: Updated authenticated user.
  /roles:
    get:
      summary: Get list of roles and permissions
      tags:
        - Role and Permission
      responses:
        '200':
          description: List of roles and permissions.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Role'
        '403':
          description: Not has sufficient authorization.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /roles/{id}:
    put:
      summary: Update permission for role.
      tags:
        - Role and Permission
      parameters:
        - name: id
          in: path
          description: Role ID you want to update
          schema:
            type: string
          required: true
      requestBody:
        description: Permission information.
        content:
          application/json:
            schema:
              type: object
              properties:
                permissions:
                  $ref: '#/components/schemas/Permissions'
      responses:
        '204':
          description: Success
        '404':
          description: Role not found
  /twitter/tweets:
    get:
      summary: Get tweets
      tags:
        - Twitter
      responses:
        '200':
          description: Get recently tweets
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Timeline'
    post:
      summary: Post new tweet
      tags:
        - Twitter
      requestBody:
        description: Tweet content
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TweetRequest'
      responses:
        '200':
          description: Tweet content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tweet'
        '422':
          description: Bad request content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /twitter/tweets/{id}:
    delete:
      summary: Delete tweet
      tags:
        - Twitter
      parameters:
        - name: id
          in: path
          description: Tweet id you want to delete
          schema:
            type: string
          required: true
      responses:
        '204':
          description: Success
        '404':
          description: Not Found
  /twitter/medias:
    post:
      summary: Upload media
      tags:
        - Twitter
      requestBody:
        description: Upload media data
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                media:
                  type: string
                  format: binary
      responses:
        '200':
          description: Success to upload media
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: '114080493040967680'
        '413':
          description: Image is too large
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /events:
    get:
      summary: Get events related to us
      tags:
        - Events
      responses:
        '200':
          description: Events data related to us
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
    post:
      summary: Import event from Oengus
      tags:
        - Events
      requestBody:
        description: Oengus marathon ID
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  example: 'rtamarathon1'
                relateType:
                  $ref: '#/components/schemas/RelateType'
                slug:
                  type: string
                  example: 'RM1'
      responses:
        '200':
          description: Imported event data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
  /events/active:
    get:
      summary: Get events related to us only active now
      tags:
        - Events
      responses:
        '200':
          description: Active events data related to us
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
  /events/{id}:
    get:
      summary: Get event related to us
      tags:
        - Events
      parameters:
        - name: 'id'
          in: path
          description: Event ID want to get
          schema:
            type: string
            example: 'rtamarathon1'
          required: true
      responses:
        '200':
          description: Event data has received ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '404':
          description: Event was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update related type
      tags:
        - Events
      parameters:
        - name: 'id'
          in: path
          description: Event ID want to update
          schema:
            type: string
            example: 'rtamarathon1'
          required: true
      requestBody:
        description: Related type
        content:
          application/json:
            schema:
              type: object
              properties:
                relateType:
                  $ref: '#/components/schemas/RelateType'
                slug:
                  type: string
                  example: 'RM1'
      responses:
        '204':
          description: Success
        '404':
          description: Event was not found
    delete:
      summary: Detach related event from us
      tags:
        - Events
      parameters:
        - name: 'id'
          in: path
          description: Event ID want to detach
          schema:
            type: string
            example: 'rtamarathon1'
          required: true
      responses:
        '204':
          description: Success
        '404':
          description: Event was not found
  /events/latest:
    get:
      summary: Get latest event
      tags:
        - Events
      responses:
        '200':
          description: Latest event data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '404':
          description: Event was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /events/{id}/attendees:
    get:
      summary: Get attendees in specific event with some condition
      tags:
        - Events
        - Attendees
      parameters:
        - in: path
          name: 'id'
          description: Event ID extracted attendee
          schema:
            type: string
            example: 'rtamarathon1'
          required: true
        - in: query
          name: scope
          schema:
            type: array
            items:
              $ref: '#/components/schemas/AttendeeScope'
      responses:
        '200':
          description: Extract attendees
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Attendee'
    post:
      summary: Register attendee to specific event
      tags:
        - Events
        - Attendees
      parameters:
        - in: path
          name: 'id'
          description: Event ID registered attendee
          schema:
            type: string
            example: 'rtamarathon1'
          required: true
      requestBody:
        description: Attendee user data
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: number
                  example: 1
                scopes:
                  type: array
                  items:
                    $ref: '#/components/schemas/AttendeeScope'
              required:
                - id
                - scopes
      responses:
        '200':
          description: 'Registered attendee data'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Attendee'
        '404':
          description: 'Register user is not found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /events/{eventId}/attendees/{userId}:
    get:
      summary: Get attendee has specific user ID
      tags:
        - Events
        - Attendees
      parameters:
        - in: path
          name: eventId
          description: Event's ID found attendee
          schema:
            type: string
          required: true
        - in: path
          name: userId
          description: User's ID found from event
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Attendee data in eventId
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Attendee'
        '403':
          description: User has not authorization to get attendee
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Attendee has specific user ID is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update attendee's scope
      tags:
        - Events
        - Attendees
      parameters:
        - in: path
          name: eventId
          description: Event's ID found attendee
          schema:
            type: string
          required: true
        - in: path
          name: userId
          description: User's ID found from event
          schema:
            type: string
          required: true
      requestBody:
        description: Update scope for attendee
        content:
          application/json:
            schema:
              type: object
              properties:
                scopes:
                  type: array
                  items:
                    '$ref': '#/components/schemas/AttendeeScope'
      responses:
        '204':
          description: Success
        '403':
          description: User has not authorization to update attendee
        '404':
          description: Attendee has specific user ID is not found
    delete:
      summary: Detach user from event attendees
      tags:
        - Events
        - Attendees
      parameters:
        - in: path
          name: eventId
          description: Event's ID attendee in
          schema:
            type: string
          required: true
        - in: path
          name: userId
          description: User's ID detach from event
          schema:
            type: string
          required: true
      responses:
        '204':
          description: Success
        '403':
          description: User has not authorization to update attendee
        '404':
          description: Detach attendee is not found
  /schemes:
    get:
      summary: Get list of event schemes.
      tags:
        - schemes
      parameters:
        - in: query
          name: planner
          description: User's ID plans scheme
          schema:
            type: string
        - in: query
          name: status
          description: Scheme's status list
          schema:
            type: array
            items:
              type: string
        - in: query
          name: startAt
          description: Date time scheme start after
          schema:
            type: string
            format: date-time
        - in: query
          name: endAt
          description: Date time scheme end before
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: Success to get schemes. If requested from not admin, get only from authenticated user.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EventScheme'
        '403':
          description: User has not authorization to get schemes.
    post:
      summary: Create new event scheme.
      tags:
        - schemes
      requestBody:
        description: Scheme content
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventSchemeRequest'
      responses:
        '200':
          description: Success to create scheme.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventScheme'
  /schemes/{id}:
    get:
      summary: Find scheme has the ID.
      tags:
        - schemes
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Scheme data has the ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventScheme'
        '403':
          description: User not admin or planner.
        '404':
          description: Scheme is not found.
    put:
      summary: Update scheme in applied.
      tags:
        - schemes
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      requestBody:
        description: Updated scheme data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventSchemeRequest'
      responses:
        '204':
          description: Success to update.
        '403':
          description: User not admin or planner.
        '404':
          description: Scheme is not found.
  /schemes/{id}/status:
    put:
      summary: Update scheme status.
      tags:
        - schemes
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      requestBody:
        description: Update status
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  $ref: '#/components/schemas/SchemeStatus'
                reply:
                  type: string
                  example: 'approve your event!'
      responses:
        '204':
          description: Success to update.
        '403':
          description: User not admin.
        '404':
          description: Scheme is not found.
  /schemes/{id}/details:
    post:
      summary: Make detail for approved scheme.
      tags:
        - schemes
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      requestBody:
        description: Scheme detail data
        content:
          application/json:
            schema:
              type: object
              properties:
                detail:
                  type: string
      responses:
        '200':
          description: Success to make detail scheme.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventScheme'
        '403':
          description: User not admin.
        '404':
          description: Scheme is not found.
  /plans:
    get:
      tags:
        - schemes
      responses:
        '200':
          description: Event plan list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EventPlan'
    post:
      tags:
        - schemes
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventPlanRequest'
      responses:
        '200':
          description: Success to create event plan.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventPlan'
  /plans/{id}:
    get:
      tags:
        - schemes
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Event plan detail
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventPlan'
        '404':
          description: Plan is not found.
    put:
      tags:
        - schemes
      responses:
        '204':
          description: Success to update.
        '403':
          description: User not admin or planner.
        '404':
          description: Plan is not found.
  /users:
    get:
      tags:
        - 'Users'
      parameters:
        - $ref: '#/components/parameters/Page'
      responses:
        '200':
          description: List users.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserPagination'
components:
  parameters:
    Page:
      name: page
      in: query
      schema:
        type: integer
        minimum: 0
  schemas:
    User:
      type: object
      properties:
        id:
          type: number
          example: 1
        username:
          type: string
          example: 'ユーザー'
        discord:
          $ref: '#/components/schemas/DiscordUser'
        channel:
          $ref: '#/components/schemas/Channel'
    UserPagination:
      type: object
      properties:
        prev:
          type: integer
          minimum: 0
          nullable: true
        current:
          type: integer
          minimum: 0
        next:
          type: integer
          minimum: 0
          nullable: true
        data:
          type: array
          items:
            $ref: '#/components/schemas/User'
    AuthUser:
      type: object
      properties:
        id:
          type: number
          example: 1
        username:
          type: string
          example: 'ユーザー'
        discord:
          $ref: '#/components/schemas/DiscordProfile'
        channels:
          $ref: '#/components/schemas/ChannelProfile'
        permissions:
          $ref: '#/components/schemas/Permissions'
    UserProfile:
      type: object
      properties:
        id:
          type: number
          example: 1
        username:
          type: string
          example: 'ユーザー'
        discord:
          $ref: '#/components/schemas/DiscordProfile'
    DiscordUser:
      type: object
      properties:
        id:
          type: string
          example: '80351110224678912'
    DiscordProfile:
      type: object
      properties:
        id:
          type: string
          example: '80351110224678912'
        username:
          type: string
          example: 'Nelly'
        discriminator:
          type: string
          example: '1337'
    TwitchUser:
      type: object
      properties:
        id:
          type: string
          example: '141981764'
    TwitchProfile:
      type: object
      properties:
        id:
          type: string
          example: '141981764'
        username:
          type: string
          example: 'twitchdev'
    Channel:
      type: object
      properties:
        twitch:
          type: array
          items:
            $ref: '#/components/schemas/TwitchUser'
    ChannelProfile:
      type: object
      properties:
        twitch:
          type: array
          items:
            $ref: '#/components/schemas/TwitchProfile'
    Permissions:
      type: array
      items:
        type: string
        enum:
          - 'twitter'
          - 'admin'
          - 'internal-stream'
    TwitterUploadMedia:
      type: object
      properties:
        mediaId:
          type: string
          example: '114080493040967680'
    Timeline:
      type: array
      items:
        $ref: '#/components/schemas/Tweet'
    Tweet:
      type: object
      properties:
        id:
          type: string
          example: '1050118621198921728'
        text:
          type: string
          example: To make room for more expression, we will now count all emojis as equal—including those with gender‍‍‍ ‍‍and skin t… https://t.co/MkGjXf9aXm
        medias:
          type: array
          items:
            $ref: '#/components/schemas/TwitterMedia'
            maxLength: 4
        createdAt:
          type: string
          format: date-time
          example: 2018-10-10T20:19:24Z
    TwitterMedia:
      type: object
      properties:
        id:
          type: string
          example: '861627472244162561'
        mediaUrl:
          type: string
          example: https://pbs.twimg.com/media/C_UdnvPUwAE3Dnn.jpg
        type:
          type: string
          enum: [photo, video, animated_gif]
          example: photo
    TweetRequest:
      type: object
      properties:
        text:
          type: string
          maxLength: 140
          example: This is example of tweet, URL will be t.co link wrapped.
        mediaIds:
          type: array
          items:
            type: string
            example: '114080493040967680'
      required:
        - text
    Role:
      type: object
      properties:
        id:
          type: string
          example: '41771983423143936'
        name:
          type: string
          example: 'WE DEM BOYZZ!!!!!!'
        permissions:
          $ref: '#/components/schemas/Permissions'
    Event:
      type: object
      properties:
        id:
          type: string
          example: 'rtamarathon1'
        name:
          type: string
          example: 'RTA marathon First'
        startAt:
          type: string
          format: date-time
          example: '2020-08-27T10:00:00Z'
        endAt:
          type: string
          format: date-time
          example: '2020-08-28T22:00:00Z'
        relateType:
          $ref: '#/components/schemas/RelateType'
        slug:
          type: string
          example: 'RM1'
        submitsOpen:
          type: boolean
        status:
          type: string
          enum:
            - 'freshed'
            - 'selected'
            - 'scheduled'
            - 'closed'
    Attendee:
      type: object
      properties:
        id:
          type: number
          example: 1
        username:
          type: string
          example: 'ユーザー'
        scopes:
          type: array
          items:
            $ref: '#/components/schemas/AttendeeScope'
        taskProgresses:
          type: object
          properties:
            runner:
              type: array
              items:
                $ref: '#/components/schemas/TaskProgress'
            commentator:
              type: array
              items:
                $ref: '#/components/schemas/TaskProgress'
            volunteer:
              type: array
              items:
                $ref: '#/components/schemas/TaskProgress'
    Task:
      type: object
      properties:
        id:
          type: number
          example: 1
        scope:
          $ref: '#/components/schemas/AttendeeScope'
        content:
          type: string
    RelateType:
      type: string
      enum:
        - 'moderate'
        - 'support'
    AttendeeScope:
      type: string
      enum:
        - 'runner'
        - 'commentator'
        - 'volunteer'
    TaskProgress:
      type: object
      properties:
        taskId:
          type: number
        status:
          $ref: '#/components/schemas/ProgressStatus'
        note:
          type: string
    ProgressStatus:
      type: string
      enum:
        - 'apply'
        - 'approval'
        - 'deny'
    EventScheme:
      type: object
      properties:
        id:
          type: number
          example: 1
        name:
          type: string
          example: 'Upcoming Event!'
        planner:
          $ref: '#/components/schemas/UserProfile'
        status:
          type: string
          example: 'applied'
        startAt:
          type: string
          format: date-time
          example: 2020-1-1T10:00:00Z
        endAt:
          type: string
          format: date-time
          example: 2020-1-2T23:00:00Z
        explanation:
          type: string
          example: 'This event is some explanation.'
        detail:
          type: string
          example: 'Event detail for users.'
    EventSchemeRequest:
      type: object
      properties:
        name:
          type: string
        startAt:
          type: string
          format: date-time
          example: 2020-1-1T10:00:00Z
        endAt:
          type: string
          format: date-time
          example: 2020-1-2T23:00:00Z
        explanation:
          type: string
          example: 'This event is some explanation.'
    EventPlan:
      type: object
      properties:
        id:
          type: number
          example: 1
        name:
          type: string
          example: 'Upcoming Event!'
        planner:
          $ref: '#/components/schemas/UserProfile'
        status:
          type: string
          example: 'applied'
        explanation:
          type: string
          example: 'This event is some explanation.'
    EventPlanRequest:
      type: object
      properties:
        name:
          type: string
        explanation:
          type: string
    SchemeStatus:
      type: string
      enum:
        - applied
        - approved
        - denied
        - confirmed
    Error:
      type: string
      example: The message about error.
